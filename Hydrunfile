#!/bin/bash

set -e

# Post-processing
if [ "$1" = "suffix" ]; then
    if [ "$3" = "staticx" ]; then
        # Make binaries static by patching them and including their dependencies
        apt update
        apt install -y python3-pip patchelf scons
        pip3 install staticx
    fi

    for file in out/*; do
        if [ "$3" = "staticx" ]; then
            staticx "${file}" "${file}.static.$2"
        fi
        mv "${file}" "${file}.$2"
    done

    exit 0
fi

# Build
apt update
apt install -y protobuf-compiler build-essential automake

# Clients
if [ "$1" = "clients" ]; then
    apt install -y libssl-dev

    make depend

    apt install -y curl

    curl -L -o /tmp/bagop "https://github.com/pojntfx/bagop/releases/latest/download/bagop.linux-$(uname -m)"
    install /tmp/bagop /usr/local/bin

    CGO_ENABLED=0 bagop -j "$(nproc)" -b edgectl -x '(android/*|ios/*|aix/ppc64|plan9/386|plan9/amd64|plan9/arm)' -p 'make build/edgectl DST=$DST' -d out
    CGO_ENABLED=0 bagop -j "$(nproc)" -b supernodectl -x '(android/*|ios/*|aix/ppc64|plan9/386|plan9/amd64|plan9/arm)' -p 'make build/supernodectl DST=$DST' -d out

    exit 0
fi

# Servers
if [ "$1" = "386" ]; then
    # i386
    dpkg --add-architecture i386

    apt update
    apt install -y gcc-i686-linux-gnu libssl-dev:i386

    export CC=i686-linux-gnu-gcc
    make depend

    export CGO_ENABLED=1
    export GOARCH=386
    make build/edged build/supernoded -j "$(nproc)"
elif [ "$1" = "amd64" ]; then
    # amd64
    dpkg --add-architecture amd64

    apt update
    apt install -y gcc-x86-64-linux-gnu libssl-dev:amd64

    export CC=x86_64-linux-gnu-gcc
    make depend

    export CGO_ENABLED=1
    export GOARCH=amd64
    make build/edged build/supernoded -j "$(nproc)"
elif [ "$1" = "arm64" ]; then
    # arm64
    dpkg --add-architecture arm64

    apt update
    apt install -y gcc-aarch64-linux-gnu libssl-dev:arm64

    export CC=aarch64-linux-gnu-gcc
    make depend

    export CGO_ENABLED=1
    export GOARCH=arm64
    make build/edged build/supernoded -j "$(nproc)"
elif [ "$1" = "arm" ]; then
    # arm
    dpkg --add-architecture armhf

    apt update
    apt install -y gcc-arm-linux-gnueabihf libssl-dev:armhf

    export CC=arm-linux-gnueabihf-gcc
    make depend

    export CGO_ENABLED=1
    export GOARCH=arm
    make build/edged build/supernoded -j "$(nproc)"
elif [ "$1" = "riscv64" ]; then
    # riscv64 (Go, Debian port)
    apt install -y golang git ca-certificates debian-ports-archive-keyring
    printf "deb http://ftp.ports.debian.org/debian-ports unstable main\ndeb http://ftp.ports.debian.org/debian-ports unreleased main\ndeb http://ftp.ports.debian.org/debian-ports experimental main" >>/etc/apt/sources.list
    export PATH="$PATH:/${HOME}/go/bin"
    dpkg --add-architecture riscv64

    apt update
    apt install -y gcc-riscv64-linux-gnu libssl-dev:riscv64

    export CC=riscv64-linux-gnu-gcc
    make depend

    export CGO_ENABLED=1
    export GOARCH=riscv64
    make build/edged build/supernoded -j "$(nproc)"
elif [ "$1" = "ppc" ]; then
    # unsupported architectures:
    #
    # hppa (gccgo not available)
    # ia64 (gccgo not available)
    # m68k (gccgo not available))
    # sh4 (gccgo not available)
    #
    # supported architectures:
    #
    # alpha
    # alpha
    # -alpha-linux-gnu
    # alpha-linux-gnu
    #
    # powerpc
    # ppc
    # -powerpc-linux-gnu
    # powerpc-linux-gnu
    #
    # ppc64
    # ppc64
    # -powerpc64-linux-gnu
    # powerpc64-linux-gnu
    #
    # sparc64
    # sparc64
    # -sparc64-linux-gnu
    # sparc64-linux-gnu
    #
    # riscv64
    # riscv64
    # -riscv64-linux-gnu
    # riscv64-linux-gnu
    #
    # alpha
    # alpha
    # alpha
    # alpha
    #
    # amd64
    # amd64
    # ""
    # x86_64-linux-gnu
    #
    # arm64
    # arm64
    # -aarch64-linux-gnu
    # aarch64-linux-gnu
    #
    # armel
    # arm
    # -arm-linux-gnueabi
    # arm-linux-gnueabi
    #
    # armhf
    # arm
    # -arm-linux-gnueabihf
    # arm-linux-gnueabihf
    #
    # i386
    # 386
    # -i686-linux-gnu
    # i686-linux-gnu
    #
    # mipsel
    # mipsle
    # -mipsel-linux-gnu
    # mipsel-linux-gnu
    #
    # mips64el
    # mips64le
    # -mips64el-linux-gnuabi64
    # mips64el-linux-gnuabi64
    #
    # ppc64el
    # powerpc64le
    # -powerpc64le-linux-gnu
    # powerpc64le-linux-gnu
    #
    # s390x
    # s390x
    # -s390x-linux-gnu
    # s390x-linux-gnu

    export DEBIAN_ARCH="s390x"
    export GOLANG_ARCH="s390x"
    export DEBIAN_PKG_SUFFIX="-s390x-linux-gnu"
    export GCC_ARCH="s390x-linux-gnu"

    # ppc (gccgo, Debian port)
    apt install -y golang git ca-certificates debian-ports-archive-keyring
    printf "deb http://ftp.ports.debian.org/debian-ports unstable main\ndeb http://ftp.ports.debian.org/debian-ports unreleased main\ndeb http://ftp.ports.debian.org/debian-ports experimental main" >>/etc/apt/sources.list
    export PATH="$PATH:/${HOME}/go/bin"
    dpkg --add-architecture "${DEBIAN_ARCH}"

    apt update
    apt install -y gccgo${DEBIAN_PKG_SUFFIX} gcc${DEBIAN_PKG_SUFFIX}

    # Hack: We can't install `libc:"${DEBIAN_ARCH}"`, but we don't need it
    ORIGINAL_PWD="$(pwd)"
    mkdir -p /tmp/libssl-dev
    cd /tmp/libssl-dev
    apt-get download libssl-dev:"${DEBIAN_ARCH}"
    dpkg -i --force-all ./*.deb
    cd "${ORIGINAL_PWD}"

    export CC=${GCC_ARCH}-gcc
    make depend

    # Hack: gccgo lacks a syscall
    chmod +w /root/go/pkg/mod/google.golang.org/grpc@*/internal/channelz/types_linux.go
    sed -i 's/SO_SNDTIMEO/SO_RCVTIMEO/' /root/go/pkg/mod/google.golang.org/grpc@*/internal/channelz/types_linux.go

    # Build dynamically-linked
    export CGO_ENABLED=1
    export GOARCH="${GOLANG_ARCH}"
    export GCCGO=${GCC_ARCH}-gccgo
    export GOFLAGS='-compiler=gccgo -gccgoflags=-static-libgo'
    make -j "$(nproc)"

    # Build statically-linked (`staticx` does not work on this platform)
    export GOFLAGS='-compiler=gccgo -gccgoflags=-static'
    make OUTPUT_DIR=out/static -j "$(nproc)"
    for file in out/static/*; do
        mv "${file}" "${file}.static"
        mv "${file}.static" out/
    done

    rm -rf out/static

    # Hack: Remove the broken `libssl-dev:"${DEBIAN_ARCH}"` package
    apt --fix-broken -y install
else
    # Host architecture
    apt install -y libssl-dev

    make depend

    make build/edged build/supernoded -j "$(nproc)"
fi

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SupernodeManagerClient is the client API for SupernodeManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SupernodeManagerClient interface {
	Create(ctx context.Context, in *Supernode, opts ...grpc.CallOption) (*SupernodeManagedId, error)
	List(ctx context.Context, in *SupernodeManagerListArgs, opts ...grpc.CallOption) (*SupernodeManagerListReply, error)
	Get(ctx context.Context, in *SupernodeManagedId, opts ...grpc.CallOption) (*SupernodeManaged, error)
	Delete(ctx context.Context, in *SupernodeManagedId, opts ...grpc.CallOption) (*SupernodeManagedId, error)
}

type supernodeManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSupernodeManagerClient(cc grpc.ClientConnInterface) SupernodeManagerClient {
	return &supernodeManagerClient{cc}
}

func (c *supernodeManagerClient) Create(ctx context.Context, in *Supernode, opts ...grpc.CallOption) (*SupernodeManagedId, error) {
	out := new(SupernodeManagedId)
	err := c.cc.Invoke(ctx, "/gon2n.SupernodeManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeManagerClient) List(ctx context.Context, in *SupernodeManagerListArgs, opts ...grpc.CallOption) (*SupernodeManagerListReply, error) {
	out := new(SupernodeManagerListReply)
	err := c.cc.Invoke(ctx, "/gon2n.SupernodeManager/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeManagerClient) Get(ctx context.Context, in *SupernodeManagedId, opts ...grpc.CallOption) (*SupernodeManaged, error) {
	out := new(SupernodeManaged)
	err := c.cc.Invoke(ctx, "/gon2n.SupernodeManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *supernodeManagerClient) Delete(ctx context.Context, in *SupernodeManagedId, opts ...grpc.CallOption) (*SupernodeManagedId, error) {
	out := new(SupernodeManagedId)
	err := c.cc.Invoke(ctx, "/gon2n.SupernodeManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SupernodeManagerServer is the server API for SupernodeManager service.
// All implementations must embed UnimplementedSupernodeManagerServer
// for forward compatibility
type SupernodeManagerServer interface {
	Create(context.Context, *Supernode) (*SupernodeManagedId, error)
	List(context.Context, *SupernodeManagerListArgs) (*SupernodeManagerListReply, error)
	Get(context.Context, *SupernodeManagedId) (*SupernodeManaged, error)
	Delete(context.Context, *SupernodeManagedId) (*SupernodeManagedId, error)
	mustEmbedUnimplementedSupernodeManagerServer()
}

// UnimplementedSupernodeManagerServer must be embedded to have forward compatible implementations.
type UnimplementedSupernodeManagerServer struct {
}

func (UnimplementedSupernodeManagerServer) Create(context.Context, *Supernode) (*SupernodeManagedId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSupernodeManagerServer) List(context.Context, *SupernodeManagerListArgs) (*SupernodeManagerListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSupernodeManagerServer) Get(context.Context, *SupernodeManagedId) (*SupernodeManaged, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSupernodeManagerServer) Delete(context.Context, *SupernodeManagedId) (*SupernodeManagedId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSupernodeManagerServer) mustEmbedUnimplementedSupernodeManagerServer() {}

// UnsafeSupernodeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SupernodeManagerServer will
// result in compilation errors.
type UnsafeSupernodeManagerServer interface {
	mustEmbedUnimplementedSupernodeManagerServer()
}

func RegisterSupernodeManagerServer(s grpc.ServiceRegistrar, srv SupernodeManagerServer) {
	s.RegisterService(&SupernodeManager_ServiceDesc, srv)
}

func _SupernodeManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Supernode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gon2n.SupernodeManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeManagerServer).Create(ctx, req.(*Supernode))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupernodeManagerListArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gon2n.SupernodeManager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeManagerServer).List(ctx, req.(*SupernodeManagerListArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupernodeManagedId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gon2n.SupernodeManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeManagerServer).Get(ctx, req.(*SupernodeManagedId))
	}
	return interceptor(ctx, in, info, handler)
}

func _SupernodeManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupernodeManagedId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SupernodeManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gon2n.SupernodeManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SupernodeManagerServer).Delete(ctx, req.(*SupernodeManagedId))
	}
	return interceptor(ctx, in, info, handler)
}

// SupernodeManager_ServiceDesc is the grpc.ServiceDesc for SupernodeManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SupernodeManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gon2n.SupernodeManager",
	HandlerType: (*SupernodeManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SupernodeManager_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SupernodeManager_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SupernodeManager_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SupernodeManager_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "supernode.proto",
}

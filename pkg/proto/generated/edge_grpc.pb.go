// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EdgeManagerClient is the client API for EdgeManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EdgeManagerClient interface {
	Create(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*EdgeManagedId, error)
	List(ctx context.Context, in *EdgeManagerListArgs, opts ...grpc.CallOption) (*EdgeManagerListReply, error)
	Get(ctx context.Context, in *EdgeManagedId, opts ...grpc.CallOption) (*EdgeManaged, error)
	Delete(ctx context.Context, in *EdgeManagedId, opts ...grpc.CallOption) (*EdgeManagedId, error)
}

type edgeManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewEdgeManagerClient(cc grpc.ClientConnInterface) EdgeManagerClient {
	return &edgeManagerClient{cc}
}

func (c *edgeManagerClient) Create(ctx context.Context, in *Edge, opts ...grpc.CallOption) (*EdgeManagedId, error) {
	out := new(EdgeManagedId)
	err := c.cc.Invoke(ctx, "/gon2n.EdgeManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeManagerClient) List(ctx context.Context, in *EdgeManagerListArgs, opts ...grpc.CallOption) (*EdgeManagerListReply, error) {
	out := new(EdgeManagerListReply)
	err := c.cc.Invoke(ctx, "/gon2n.EdgeManager/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeManagerClient) Get(ctx context.Context, in *EdgeManagedId, opts ...grpc.CallOption) (*EdgeManaged, error) {
	out := new(EdgeManaged)
	err := c.cc.Invoke(ctx, "/gon2n.EdgeManager/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *edgeManagerClient) Delete(ctx context.Context, in *EdgeManagedId, opts ...grpc.CallOption) (*EdgeManagedId, error) {
	out := new(EdgeManagedId)
	err := c.cc.Invoke(ctx, "/gon2n.EdgeManager/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EdgeManagerServer is the server API for EdgeManager service.
// All implementations must embed UnimplementedEdgeManagerServer
// for forward compatibility
type EdgeManagerServer interface {
	Create(context.Context, *Edge) (*EdgeManagedId, error)
	List(context.Context, *EdgeManagerListArgs) (*EdgeManagerListReply, error)
	Get(context.Context, *EdgeManagedId) (*EdgeManaged, error)
	Delete(context.Context, *EdgeManagedId) (*EdgeManagedId, error)
	mustEmbedUnimplementedEdgeManagerServer()
}

// UnimplementedEdgeManagerServer must be embedded to have forward compatible implementations.
type UnimplementedEdgeManagerServer struct {
}

func (UnimplementedEdgeManagerServer) Create(context.Context, *Edge) (*EdgeManagedId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedEdgeManagerServer) List(context.Context, *EdgeManagerListArgs) (*EdgeManagerListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedEdgeManagerServer) Get(context.Context, *EdgeManagedId) (*EdgeManaged, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEdgeManagerServer) Delete(context.Context, *EdgeManagedId) (*EdgeManagedId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEdgeManagerServer) mustEmbedUnimplementedEdgeManagerServer() {}

// UnsafeEdgeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EdgeManagerServer will
// result in compilation errors.
type UnsafeEdgeManagerServer interface {
	mustEmbedUnimplementedEdgeManagerServer()
}

func RegisterEdgeManagerServer(s grpc.ServiceRegistrar, srv EdgeManagerServer) {
	s.RegisterService(&EdgeManager_ServiceDesc, srv)
}

func _EdgeManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Edge)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gon2n.EdgeManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeManagerServer).Create(ctx, req.(*Edge))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeManager_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeManagerListArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeManagerServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gon2n.EdgeManager/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeManagerServer).List(ctx, req.(*EdgeManagerListArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeManager_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeManagedId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeManagerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gon2n.EdgeManager/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeManagerServer).Get(ctx, req.(*EdgeManagedId))
	}
	return interceptor(ctx, in, info, handler)
}

func _EdgeManager_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeManagedId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EdgeManagerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gon2n.EdgeManager/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EdgeManagerServer).Delete(ctx, req.(*EdgeManagedId))
	}
	return interceptor(ctx, in, info, handler)
}

// EdgeManager_ServiceDesc is the grpc.ServiceDesc for EdgeManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EdgeManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gon2n.EdgeManager",
	HandlerType: (*EdgeManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _EdgeManager_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _EdgeManager_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EdgeManager_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EdgeManager_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "edge.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: edge.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowP2P             bool   `protobuf:"varint,1,opt,name=AllowP2P,proto3" json:"AllowP2P,omitempty"`
	AllowRouting         bool   `protobuf:"varint,2,opt,name=AllowRouting,proto3" json:"AllowRouting,omitempty"`
	CommunityName        string `protobuf:"bytes,3,opt,name=CommunityName,proto3" json:"CommunityName,omitempty"`
	DisablePMTUDiscovery bool   `protobuf:"varint,4,opt,name=DisablePMTUDiscovery,proto3" json:"DisablePMTUDiscovery,omitempty"`
	DisableMulticast     bool   `protobuf:"varint,5,opt,name=DisableMulticast,proto3" json:"DisableMulticast,omitempty"`
	DynamicIPMode        bool   `protobuf:"varint,6,opt,name=DynamicIPMode,proto3" json:"DynamicIPMode,omitempty"`
	EncryptionKey        string `protobuf:"bytes,7,opt,name=EncryptionKey,proto3" json:"EncryptionKey,omitempty"`
	LocalPort            int64  `protobuf:"varint,8,opt,name=LocalPort,proto3" json:"LocalPort,omitempty"`
	ManagementPort       int64  `protobuf:"varint,9,opt,name=ManagementPort,proto3" json:"ManagementPort,omitempty"`
	RegisterInterval     int64  `protobuf:"varint,10,opt,name=RegisterInterval,proto3" json:"RegisterInterval,omitempty"`
	RegisterTTL          int64  `protobuf:"varint,11,opt,name=RegisterTTL,proto3" json:"RegisterTTL,omitempty"`
	SupernodeHostPort    string `protobuf:"bytes,12,opt,name=SupernodeHostPort,proto3" json:"SupernodeHostPort,omitempty"`
	TypeOfService        int64  `protobuf:"varint,13,opt,name=TypeOfService,proto3" json:"TypeOfService,omitempty"`
	EncryptionMethod     int64  `protobuf:"varint,14,opt,name=EncryptionMethod,proto3" json:"EncryptionMethod,omitempty"`
	DeviceName           string `protobuf:"bytes,15,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	AddressMode          string `protobuf:"bytes,16,opt,name=AddressMode,proto3" json:"AddressMode,omitempty"`
	DeviceIP             string `protobuf:"bytes,17,opt,name=DeviceIP,proto3" json:"DeviceIP,omitempty"`
	DeviceNetmask        string `protobuf:"bytes,18,opt,name=DeviceNetmask,proto3" json:"DeviceNetmask,omitempty"`
	DeviceMACAddress     string `protobuf:"bytes,19,opt,name=DeviceMACAddress,proto3" json:"DeviceMACAddress,omitempty"`
	MTU                  int64  `protobuf:"varint,20,opt,name=MTU,proto3" json:"MTU,omitempty"`
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_edge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_edge_proto_rawDescGZIP(), []int{0}
}

func (x *Edge) GetAllowP2P() bool {
	if x != nil {
		return x.AllowP2P
	}
	return false
}

func (x *Edge) GetAllowRouting() bool {
	if x != nil {
		return x.AllowRouting
	}
	return false
}

func (x *Edge) GetCommunityName() string {
	if x != nil {
		return x.CommunityName
	}
	return ""
}

func (x *Edge) GetDisablePMTUDiscovery() bool {
	if x != nil {
		return x.DisablePMTUDiscovery
	}
	return false
}

func (x *Edge) GetDisableMulticast() bool {
	if x != nil {
		return x.DisableMulticast
	}
	return false
}

func (x *Edge) GetDynamicIPMode() bool {
	if x != nil {
		return x.DynamicIPMode
	}
	return false
}

func (x *Edge) GetEncryptionKey() string {
	if x != nil {
		return x.EncryptionKey
	}
	return ""
}

func (x *Edge) GetLocalPort() int64 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *Edge) GetManagementPort() int64 {
	if x != nil {
		return x.ManagementPort
	}
	return 0
}

func (x *Edge) GetRegisterInterval() int64 {
	if x != nil {
		return x.RegisterInterval
	}
	return 0
}

func (x *Edge) GetRegisterTTL() int64 {
	if x != nil {
		return x.RegisterTTL
	}
	return 0
}

func (x *Edge) GetSupernodeHostPort() string {
	if x != nil {
		return x.SupernodeHostPort
	}
	return ""
}

func (x *Edge) GetTypeOfService() int64 {
	if x != nil {
		return x.TypeOfService
	}
	return 0
}

func (x *Edge) GetEncryptionMethod() int64 {
	if x != nil {
		return x.EncryptionMethod
	}
	return 0
}

func (x *Edge) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *Edge) GetAddressMode() string {
	if x != nil {
		return x.AddressMode
	}
	return ""
}

func (x *Edge) GetDeviceIP() string {
	if x != nil {
		return x.DeviceIP
	}
	return ""
}

func (x *Edge) GetDeviceNetmask() string {
	if x != nil {
		return x.DeviceNetmask
	}
	return ""
}

func (x *Edge) GetDeviceMACAddress() string {
	if x != nil {
		return x.DeviceMACAddress
	}
	return ""
}

func (x *Edge) GetMTU() int64 {
	if x != nil {
		return x.MTU
	}
	return 0
}

type EdgeManaged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                   string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	AllowP2P             bool   `protobuf:"varint,2,opt,name=AllowP2P,proto3" json:"AllowP2P,omitempty"`
	AllowRouting         bool   `protobuf:"varint,3,opt,name=AllowRouting,proto3" json:"AllowRouting,omitempty"`
	CommunityName        string `protobuf:"bytes,4,opt,name=CommunityName,proto3" json:"CommunityName,omitempty"`
	DisablePMTUDiscovery bool   `protobuf:"varint,5,opt,name=DisablePMTUDiscovery,proto3" json:"DisablePMTUDiscovery,omitempty"`
	DisableMulticast     bool   `protobuf:"varint,6,opt,name=DisableMulticast,proto3" json:"DisableMulticast,omitempty"`
	DynamicIPMode        bool   `protobuf:"varint,7,opt,name=DynamicIPMode,proto3" json:"DynamicIPMode,omitempty"`
	LocalPort            int64  `protobuf:"varint,8,opt,name=LocalPort,proto3" json:"LocalPort,omitempty"`
	ManagementPort       int64  `protobuf:"varint,9,opt,name=ManagementPort,proto3" json:"ManagementPort,omitempty"`
	RegisterInterval     int64  `protobuf:"varint,10,opt,name=RegisterInterval,proto3" json:"RegisterInterval,omitempty"`
	RegisterTTL          int64  `protobuf:"varint,11,opt,name=RegisterTTL,proto3" json:"RegisterTTL,omitempty"`
	SupernodeHostPort    string `protobuf:"bytes,12,opt,name=SupernodeHostPort,proto3" json:"SupernodeHostPort,omitempty"`
	TypeOfService        int64  `protobuf:"varint,13,opt,name=TypeOfService,proto3" json:"TypeOfService,omitempty"`
	EncryptionMethod     int64  `protobuf:"varint,14,opt,name=EncryptionMethod,proto3" json:"EncryptionMethod,omitempty"`
	DeviceName           string `protobuf:"bytes,15,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
	AddressMode          string `protobuf:"bytes,16,opt,name=AddressMode,proto3" json:"AddressMode,omitempty"`
	DeviceIP             string `protobuf:"bytes,17,opt,name=DeviceIP,proto3" json:"DeviceIP,omitempty"`
	DeviceNetmask        string `protobuf:"bytes,18,opt,name=DeviceNetmask,proto3" json:"DeviceNetmask,omitempty"`
	DeviceMACAddress     string `protobuf:"bytes,19,opt,name=DeviceMACAddress,proto3" json:"DeviceMACAddress,omitempty"`
	MTU                  int64  `protobuf:"varint,20,opt,name=MTU,proto3" json:"MTU,omitempty"`
}

func (x *EdgeManaged) Reset() {
	*x = EdgeManaged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeManaged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeManaged) ProtoMessage() {}

func (x *EdgeManaged) ProtoReflect() protoreflect.Message {
	mi := &file_edge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeManaged.ProtoReflect.Descriptor instead.
func (*EdgeManaged) Descriptor() ([]byte, []int) {
	return file_edge_proto_rawDescGZIP(), []int{1}
}

func (x *EdgeManaged) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EdgeManaged) GetAllowP2P() bool {
	if x != nil {
		return x.AllowP2P
	}
	return false
}

func (x *EdgeManaged) GetAllowRouting() bool {
	if x != nil {
		return x.AllowRouting
	}
	return false
}

func (x *EdgeManaged) GetCommunityName() string {
	if x != nil {
		return x.CommunityName
	}
	return ""
}

func (x *EdgeManaged) GetDisablePMTUDiscovery() bool {
	if x != nil {
		return x.DisablePMTUDiscovery
	}
	return false
}

func (x *EdgeManaged) GetDisableMulticast() bool {
	if x != nil {
		return x.DisableMulticast
	}
	return false
}

func (x *EdgeManaged) GetDynamicIPMode() bool {
	if x != nil {
		return x.DynamicIPMode
	}
	return false
}

func (x *EdgeManaged) GetLocalPort() int64 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

func (x *EdgeManaged) GetManagementPort() int64 {
	if x != nil {
		return x.ManagementPort
	}
	return 0
}

func (x *EdgeManaged) GetRegisterInterval() int64 {
	if x != nil {
		return x.RegisterInterval
	}
	return 0
}

func (x *EdgeManaged) GetRegisterTTL() int64 {
	if x != nil {
		return x.RegisterTTL
	}
	return 0
}

func (x *EdgeManaged) GetSupernodeHostPort() string {
	if x != nil {
		return x.SupernodeHostPort
	}
	return ""
}

func (x *EdgeManaged) GetTypeOfService() int64 {
	if x != nil {
		return x.TypeOfService
	}
	return 0
}

func (x *EdgeManaged) GetEncryptionMethod() int64 {
	if x != nil {
		return x.EncryptionMethod
	}
	return 0
}

func (x *EdgeManaged) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *EdgeManaged) GetAddressMode() string {
	if x != nil {
		return x.AddressMode
	}
	return ""
}

func (x *EdgeManaged) GetDeviceIP() string {
	if x != nil {
		return x.DeviceIP
	}
	return ""
}

func (x *EdgeManaged) GetDeviceNetmask() string {
	if x != nil {
		return x.DeviceNetmask
	}
	return ""
}

func (x *EdgeManaged) GetDeviceMACAddress() string {
	if x != nil {
		return x.DeviceMACAddress
	}
	return ""
}

func (x *EdgeManaged) GetMTU() int64 {
	if x != nil {
		return x.MTU
	}
	return 0
}

type EdgeManagerListArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EdgeManagerListArgs) Reset() {
	*x = EdgeManagerListArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeManagerListArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeManagerListArgs) ProtoMessage() {}

func (x *EdgeManagerListArgs) ProtoReflect() protoreflect.Message {
	mi := &file_edge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeManagerListArgs.ProtoReflect.Descriptor instead.
func (*EdgeManagerListArgs) Descriptor() ([]byte, []int) {
	return file_edge_proto_rawDescGZIP(), []int{2}
}

type EdgeManagedId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *EdgeManagedId) Reset() {
	*x = EdgeManagedId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeManagedId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeManagedId) ProtoMessage() {}

func (x *EdgeManagedId) ProtoReflect() protoreflect.Message {
	mi := &file_edge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeManagedId.ProtoReflect.Descriptor instead.
func (*EdgeManagedId) Descriptor() ([]byte, []int) {
	return file_edge_proto_rawDescGZIP(), []int{3}
}

func (x *EdgeManagedId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type EdgeManagerListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EdgesManaged []*EdgeManaged `protobuf:"bytes,1,rep,name=EdgesManaged,proto3" json:"EdgesManaged,omitempty"`
}

func (x *EdgeManagerListReply) Reset() {
	*x = EdgeManagerListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeManagerListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeManagerListReply) ProtoMessage() {}

func (x *EdgeManagerListReply) ProtoReflect() protoreflect.Message {
	mi := &file_edge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeManagerListReply.ProtoReflect.Descriptor instead.
func (*EdgeManagerListReply) Descriptor() ([]byte, []int) {
	return file_edge_proto_rawDescGZIP(), []int{4}
}

func (x *EdgeManagerListReply) GetEdgesManaged() []*EdgeManaged {
	if x != nil {
		return x.EdgesManaged
	}
	return nil
}

var File_edge_proto protoreflect.FileDescriptor

var file_edge_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x67, 0x6f,
	0x6e, 0x32, 0x6e, 0x22, 0xee, 0x05, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x32, 0x50, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x32, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x4d, 0x54,
	0x55, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x4d, 0x54, 0x55, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x50, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x54, 0x4c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54,
	0x54, 0x4c, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x48,
	0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x50,
	0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x54, 0x55, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x4d, 0x54, 0x55, 0x22, 0xdf, 0x05, 0x0a, 0x0b, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x32, 0x50,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x32, 0x50,
	0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x4d, 0x54, 0x55, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x4d, 0x54, 0x55, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x12, 0x2a,
	0x0a, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x49, 0x50, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x54,
	0x4c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x54, 0x4c, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64,
	0x65, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x53, 0x75, 0x70, 0x65, 0x72, 0x6e, 0x6f, 0x64, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x4f,
	0x66, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x50, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x50, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x65, 0x74, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x65, 0x74, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x41, 0x43, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x54, 0x55, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x4d, 0x54, 0x55, 0x22, 0x15, 0x0a, 0x13, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x67, 0x73, 0x22, 0x1f, 0x0a,
	0x0d, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x22, 0x4e,
	0x0a, 0x14, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x36, 0x0a, 0x0c, 0x45, 0x64, 0x67, 0x65, 0x73, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x6f, 0x6e, 0x32, 0x6e, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64,
	0x52, 0x0c, 0x45, 0x64, 0x67, 0x65, 0x73, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x32, 0xea,
	0x01, 0x0a, 0x0b, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x2e, 0x67, 0x6f, 0x6e, 0x32, 0x6e,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6e, 0x32, 0x6e, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6e, 0x32, 0x6e, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x72, 0x67,
	0x73, 0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6e, 0x32, 0x6e, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x31, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x67, 0x6f, 0x6e, 0x32, 0x6e, 0x2e,
	0x45, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x1a, 0x12, 0x2e,
	0x67, 0x6f, 0x6e, 0x32, 0x6e, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x2e,
	0x67, 0x6f, 0x6e, 0x32, 0x6e, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x67, 0x6f, 0x6e, 0x32, 0x6e, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x49, 0x64, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e,
	0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_edge_proto_rawDescOnce sync.Once
	file_edge_proto_rawDescData = file_edge_proto_rawDesc
)

func file_edge_proto_rawDescGZIP() []byte {
	file_edge_proto_rawDescOnce.Do(func() {
		file_edge_proto_rawDescData = protoimpl.X.CompressGZIP(file_edge_proto_rawDescData)
	})
	return file_edge_proto_rawDescData
}

var file_edge_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_edge_proto_goTypes = []interface{}{
	(*Edge)(nil),                 // 0: gon2n.Edge
	(*EdgeManaged)(nil),          // 1: gon2n.EdgeManaged
	(*EdgeManagerListArgs)(nil),  // 2: gon2n.EdgeManagerListArgs
	(*EdgeManagedId)(nil),        // 3: gon2n.EdgeManagedId
	(*EdgeManagerListReply)(nil), // 4: gon2n.EdgeManagerListReply
}
var file_edge_proto_depIdxs = []int32{
	1, // 0: gon2n.EdgeManagerListReply.EdgesManaged:type_name -> gon2n.EdgeManaged
	0, // 1: gon2n.EdgeManager.Create:input_type -> gon2n.Edge
	2, // 2: gon2n.EdgeManager.List:input_type -> gon2n.EdgeManagerListArgs
	3, // 3: gon2n.EdgeManager.Get:input_type -> gon2n.EdgeManagedId
	3, // 4: gon2n.EdgeManager.Delete:input_type -> gon2n.EdgeManagedId
	3, // 5: gon2n.EdgeManager.Create:output_type -> gon2n.EdgeManagedId
	4, // 6: gon2n.EdgeManager.List:output_type -> gon2n.EdgeManagerListReply
	1, // 7: gon2n.EdgeManager.Get:output_type -> gon2n.EdgeManaged
	3, // 8: gon2n.EdgeManager.Delete:output_type -> gon2n.EdgeManagedId
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_edge_proto_init() }
func file_edge_proto_init() {
	if File_edge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_edge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeManaged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeManagerListArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeManagedId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeManagerListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_edge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_edge_proto_goTypes,
		DependencyIndexes: file_edge_proto_depIdxs,
		MessageInfos:      file_edge_proto_msgTypes,
	}.Build()
	File_edge_proto = out.File
	file_edge_proto_rawDesc = nil
	file_edge_proto_goTypes = nil
	file_edge_proto_depIdxs = nil
}

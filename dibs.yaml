targets:
  - name: supernoded-linux
    helm:
      src: charts/supernoded
      dist: .bin/chart/supernoded
    dockerManifest: pojntfx/supernoded:latest
    platforms:
      - identifier: linux/amd64
        paths:
          watch: .
          include: (.*)\.go
          assetInImage: /usr/local/bin/supernoded
          assetOut: .bin/binaries/supernoded/supernoded-linux-amd64
          gitRepoRoot: .
        commands:
          generateSources: go generate ./...
          build: GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o .bin/binaries/supernoded/supernoded-linux-amd64 cmd/supernoded/main.go
          unitTests: go test -v ./...
          integrationTests: .bin/binaries/supernoded/supernoded-linux-amd64 --help
          imageTests: docker run --platform linux/amd64 -e DIBS_TARGET=supernoded-linux -e TARGETPLATFORM=linux/amd64 pojntfx/supernoded:linux-amd64 /usr/local/bin/supernoded --help
          chartTests: helm install supernoded .bin/chart/supernoded/supernoded-*.tgz && helm delete supernoded
          start: |
            if [ "$DIBS_DEBUG" = "true" ]; then
              pkill -9 dlv || true
              pkill -9 supernoded || true
              .bin/binaries/supernodeedsupernoded-linux-amd64 &
              dlv attach $! --headless --listen=:31441 --api-version=2 --accept-multiclient || true
            else
              .bin/binaries/supernoded/supernoded-linux-amd64
            fi
        docker:
          build:
            file: Dockerfile.supernoded
            context: .
            tag: pojntfx/supernoded:linux-amd64
          unitTests:
            file: Dockerfile.unitTests
            context: .
            tag: pojntfx/supernoded-unit-tests:linux-amd64
          integrationTests:
            file: Dockerfile.integrationTests
            context: .
            tag: pojntfx/supernoded-integration-tests:linux-amd64
          chartTests:
            file: Dockerfile.chartTests
            context: .
            tag: pojntfx/supernoded-chart-tests:linux-amd64
      - identifier: linux/arm64
        paths:
          watch: .
          include: (.*)\.go
          assetInImage: /usr/local/bin/supernoded
          assetOut: .bin/binaries/supernoded/supernoded-linux-arm64
          gitRepoRoot: .
        commands:
          generateSources: go generate ./...
          build: GOOS=linux GOARCH=arm64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o .bin/binaries/supernoded/supernoded-linux-arm64 cmd/supernoded/main.go
          unitTests: go test -v ./...
          integrationTests: .bin/binaries/supernoded/supernoded-linux-arm64 --help
          imageTests: docker run --platform linux/arm64 -e DIBS_TARGET=supernoded-linux -e TARGETPLATFORM=linux/arm64 pojntfx/supernoded:linux-arm64 /usr/local/bin/supernoded --help
          chartTests: helm install supernoded .bin/chart/supernoded/supernoded-*.tgz && helm delete supernoded
          start: |
            if [ "$DIBS_DEBUG" = "true" ]; then
              pkill -9 dlv || true
              pkill -9 supernoded || true
              .bin/binaries/supernoded/supernoded-linux-arm64 &
              dlv attach $! --headless --listen=:31441 --api-version=2 --accept-multiclient || true
            else
              .bin/binaries/supernoded/supernoded-linux-arm64
            fi
        docker:
          build:
            file: Dockerfile.supernoded
            context: .
            tag: pojntfx/supernoded:linux-arm64
          unitTests:
            file: Dockerfile.unitTests
            context: .
            tag: pojntfx/supernoded-unit-tests:linux-arm64
          integrationTests:
            file: Dockerfile.integrationTests
            context: .
            tag: pojntfx/supernoded-integration-tests:linux-arm64
          chartTests:
            file: Dockerfile.chartTests
            context: .
            tag: pojntfx/supernoded-chart-tests:linux-arm64
  - name: supernoded-darwin
    platforms:
      - identifier: darwin/amd64
        paths:
          watch: .
          include: (.*)\.go
          gitRepoRoot: .
        commands:
          generateSources: go generate ./...
          build: GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o .bin/binaries/supernoded/supernoded-linux-amd64 cmd/supernoded/main.go
          unitTests: go test -v ./...
          integrationTests: .bin/binaries/supernoded/supernoded-darwin-amd64 --help
          start: |
            if [ "$DIBS_DEBUG" = "true" ]; then
              pkill -9 dlv || true
              pkill -9 supernoded || true
              .bin/binaries/supernoded/supernoded-darwin-amd64 &
              dlv attach $! --headless --listen=:31441 --api-version=2 --accept-multiclient || true
            else
              .bin/binaries/supernoded/supernoded-darwin-amd64
            fi
  - name: supernodectl-linux
    platforms:
      - identifier: linux/amd64
        paths:
          watch: .
          include: (.*)\.go
          assetInImage: /usr/local/bin/supernodectl
          assetOut: .bin/binaries/supernodectl/supernodectl-linux-amd64
          gitRepoRoot: .
        commands:
          generateSources: go generate ./...
          build: GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o .bin/binaries/supernodectl/supernodectl-linux-amd64 cmd/supernodectl/main.go
          unitTests: go test -v ./...
          integrationTests: .bin/binaries/supernodectl/supernodectl-linux-amd64 --help
          start: .bin/binaries/supernodectl/supernodectl-linux-amd64 --help
        docker:
          build:
            file: Dockerfile.supernodectl
            context: .
            tag: pojntfx/supernodectl:linux-amd64 # Only to get the binaries from Docker
          unitTests:
            file: Dockerfile.unitTests
            context: .
            tag: pojntfx/supernodectl-unit-tests:linux-amd64
          integrationTests:
            file: Dockerfile.integrationTests
            context: .
            tag: pojntfx/supernodectl-integration-tests:linux-amd64
      - identifier: linux/arm64
        paths:
          watch: .
          include: (.*)\.go
          assetInImage: /usr/local/bin/supernodectl
          assetOut: .bin/binaries/supernodectl/supernodectl-linux-arm64
          gitRepoRoot: .
        commands:
          generateSources: go generate ./...
          build: GOOS=linux GOARCH=arm64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o .bin/binaries/supernodectl/supernodectl-linux-arm64 cmd/supernodectl/main.go
          unitTests: go test -v ./...
          integrationTests: .bin/binaries/supernodectl/supernodectl-linux-arm64 --help
          start: .bin/binaries/supernodectl/supernodectl-linux-arm64 --help
        docker:
          build:
            file: Dockerfile.supernodectl
            context: .
            tag: pojntfx/supernodectl:linux-arm64 # Only to get the binaries from Docker
          unitTests:
            file: Dockerfile.unitTests
            context: .
            tag: pojntfx/supernodectl-unit-tests:linux-arm64
          integrationTests:
            file: Dockerfile.integrationTests
            context: .
            tag: pojntfx/supernodectl-integration-tests:linux-arm64
  - name: supernodectl-darwin
    platforms:
      - identifier: darwin/amd64
        paths:
          watch: .
          include: (.*)\.go
          gitRepoRoot: .
        commands:
          generateSources: go generate ./...
          build: GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o .bin/binaries/supernodectl/supernodectl-darwin-amd64 cmd/supernodectl/main.go
          unitTests: go test -v ./...
          integrationTests: .bin/binaries/supernodectl/supernodectl-darwin-amd64 --help
          start: .bin/binaries/supernodectl/supernodectl-darwin-amd64 --help
  - name: edged-linux
    helm:
      src: charts/edged
      dist: .bin/chart/edged
    dockerManifest: pojntfx/edged:latest
    platforms:
      - identifier: linux/amd64
        paths:
          watch: .
          include: (.*)\.go
          assetInImage: /usr/local/bin/edged
          assetOut: .bin/binaries/edged/edged-linux-amd64
          gitRepoRoot: .
        commands:
          generateSources: go generate ./...
          build: GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o .bin/binaries/edged/edged-linux-amd64 cmd/edged/main.go
          unitTests: go test -v ./...
          integrationTests: .bin/binaries/edged/edged-linux-amd64 --help
          imageTests: docker run --platform linux/amd64 -e DIBS_TARGET=edged-linux -e TARGETPLATFORM=linux/amd64 pojntfx/edged:linux-amd64 /usr/local/bin/edged --help
          chartTests: helm install edged .bin/chart/edged/edged-*.tgz && helm delete edged
          start: |
            if [ "$DIBS_DEBUG" = "true" ]; then
              pkill -9 dlv || true
              pkill -9 edged || true
              .bin/binaries/edged/edged-linux-amd64 &
              dlv attach $! --headless --listen=:31441 --api-version=2 --accept-multiclient || true
            else
              .bin/binaries/edged/edged-linux-amd64
            fi
        docker:
          build:
            file: Dockerfile.edged
            context: .
            tag: pojntfx/edged:linux-amd64
          unitTests:
            file: Dockerfile.unitTests
            context: .
            tag: pojntfx/edged-unit-tests:linux-amd64
          integrationTests:
            file: Dockerfile.integrationTests
            context: .
            tag: pojntfx/edged-integration-tests:linux-amd64
          chartTests:
            file: Dockerfile.chartTests
            context: .
            tag: pojntfx/edged-chart-tests:linux-amd64
      - identifier: linux/arm64
        paths:
          watch: .
          include: (.*)\.go
          assetInImage: /usr/local/bin/edged
          assetOut: .bin/binaries/edged/edged-linux-arm64
          gitRepoRoot: .
        commands:
          generateSources: go generate ./...
          build: GOOS=linux GOARCH=arm64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o .bin/binaries/edged/edged-linux-arm64 cmd/edged/main.go
          unitTests: go test -v ./...
          integrationTests: .bin/binaries/edged/edged-linux-arm64 --help
          imageTests: docker run --platform linux/arm64 -e DIBS_TARGET=edged-linux -e TARGETPLATFORM=linux/arm64 pojntfx/edged:linux-arm64 /usr/local/bin/edged --help
          chartTests: helm install edged .bin/chart/edged/edged-*.tgz && helm delete edged
          start: |
            if [ "$DIBS_DEBUG" = "true" ]; then
              pkill -9 dlv || true
              pkill -9 edged || true
              .bin/binaries/edged/edged-linux-arm64 &
              dlv attach $! --headless --listen=:31441 --api-version=2 --accept-multiclient || true
            else
              .bin/binaries/edged/edged-linux-arm64
            fi
        docker:
          build:
            file: Dockerfile.edged
            context: .
            tag: pojntfx/edged:linux-arm64
          unitTests:
            file: Dockerfile.unitTests
            context: .
            tag: pojntfx/edged-unit-tests:linux-arm64
          integrationTests:
            file: Dockerfile.integrationTests
            context: .
            tag: pojntfx/edged-integration-tests:linux-arm64
          chartTests:
            file: Dockerfile.chartTests
            context: .
            tag: pojntfx/edged-chart-tests:linux-arm64
  - name: edged-darwin
    platforms:
      - identifier: darwin/amd64
        paths:
          watch: .
          include: (.*)\.go
          gitRepoRoot: .
        commands:
          generateSources: go generate ./...
          build: GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o .bin/binaries/edged/edged-linux-amd64 cmd/edged/main.go
          unitTests: go test -v ./...
          integrationTests: .bin/binaries/edged/edged-darwin-amd64 --help
          start: |
            if [ "$DIBS_DEBUG" = "true" ]; then
              pkill -9 dlv || true
              pkill -9 edged || true
              .bin/binaries/edged/edged-darwin-amd64 &
              dlv attach $! --headless --listen=:31441 --api-version=2 --accept-multiclient || true
            else
              .bin/binaries/edged/edged-darwin-amd64
            fi
  - name: edgectl-linux
    platforms:
      - identifier: linux/amd64
        paths:
          watch: .
          include: (.*)\.go
          assetInImage: /usr/local/bin/edgectl
          assetOut: .bin/binaries/edgectl/edgectl-linux-amd64
          gitRepoRoot: .
        commands:
          generateSources: go generate ./...
          build: GOOS=linux GOARCH=amd64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o .bin/binaries/edgectl/edgectl-linux-amd64 cmd/edgectl/main.go
          unitTests: go test -v ./...
          integrationTests: .bin/binaries/edgectl/edgectl-linux-amd64 --help
          start: .bin/binaries/edgectl/edgectl-linux-amd64 --help
        docker:
          build:
            file: Dockerfile.edgectl
            context: .
            tag: pojntfx/edgectl:linux-amd64 # Only to get the binaries from Docker
          unitTests:
            file: Dockerfile.unitTests
            context: .
            tag: pojntfx/edgectl-unit-tests:linux-amd64
          integrationTests:
            file: Dockerfile.integrationTests
            context: .
            tag: pojntfx/edgectl-integration-tests:linux-amd64
      - identifier: linux/arm64
        paths:
          watch: .
          include: (.*)\.go
          assetInImage: /usr/local/bin/edgectl
          assetOut: .bin/binaries/edgectl/edgectl-linux-arm64
          gitRepoRoot: .
        commands:
          generateSources: go generate ./...
          build: GOOS=linux GOARCH=arm64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o .bin/binaries/edgectl/edgectl-linux-arm64 cmd/edgectl/main.go
          unitTests: go test -v ./...
          integrationTests: .bin/binaries/edgectl/edgectl-linux-arm64 --help
          start: .bin/binaries/edgectl/edgectl-linux-arm64 --help
        docker:
          build:
            file: Dockerfile.edgectl
            context: .
            tag: pojntfx/edgectl:linux-arm64 # Only to get the binaries from Docker
          unitTests:
            file: Dockerfile.unitTests
            context: .
            tag: pojntfx/edgectl-unit-tests:linux-arm64
          integrationTests:
            file: Dockerfile.integrationTests
            context: .
            tag: pojntfx/edgectl-integration-tests:linux-arm64
  - name: edgectl-darwin
    platforms:
      - identifier: darwin/amd64
        paths:
          watch: .
          include: (.*)\.go
          gitRepoRoot: .
        commands:
          generateSources: go generate ./...
          build: GOOS=darwin GOARCH=amd64 CGO_ENABLED=1 go build -tags netgo -ldflags '-extldflags "-static"' -o .bin/binaries/edgectl/edgectl-darwin-amd64 cmd/edgectl/main.go
          unitTests: go test -v ./...
          integrationTests: .bin/binaries/edgectl/edgectl-darwin-amd64 --help
          start: .bin/binaries/edgectl/edgectl-darwin-amd64 --help
